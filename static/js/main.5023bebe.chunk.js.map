{"version":3,"sources":["theme.tsx","components/form/PaymentSchema.tsx","components/form/InputWithMask.tsx","components/form/Input.tsx","components/form/PaymentForm.view.tsx","components/form/PaymentForm.form.tsx","pages/PaymentPage.tsx","components/card/Card.tsx","pages/MainPage.tsx","components/local/locale.jsx","components/router/PagesPath.tsx","components/router/Router.tsx","components/header/Header.jsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["theme","createMuiTheme","palette","primary","main","secondary","error","background","default","i18n","defineMessages","phoneRequired","id","defaultMessage","invalidNumber","amountLimit","enterAmount","PaymentSchema","Yup","shape","phoneNumber","required","matches","price","min","max","TextError","styled","div","MyMaskField","name","variant","type","label","useField","field","meta","intl","useIntl","mask","value","onChange","onBlur","inputProps","TextField","touched","style","height","render","formatMessage","MyTextField","autoComplete","phoneLabel","priceLabel","injectIntl","isLoading","Button","disabled","color","BlockForm","section","Title","h1","sleep","time","Promise","acc","setTimeout","initialValues","successMsg","failMsg","MyForm","props","useState","setLoading","handleSubmit","values","formikHelpers","a","alert","Math","round","random","initial","opacity","animate","transition","delay","onSubmit","validationSchema","component","Root","SelectedOperator","Payment","useParams","x","fakeData","find","fake","useStyles","makeStyles","createStyles","img","objectFit","textDecorationLine","ImgMediaCard1","alt","image","title","classes","to","whileHover","scale","whileTap","Card","CardActionArea","CardMedia","className","CardActions","size","lang","Choose","Grid","Main","y","map","operator","key","url","PagesPath","Router","exact","path","PaymentPage","LocaleContext","React","createContext","local","navigator","language","slice","ru","en","WrapperLocale","locale","setLocale","messages","setMessages","Provider","selectLang","e","newLocale","target","children","formControl","white","margin","spacing","minWidth","selectEmpty","backgroundColor","marginTop","icon","Header","context","useContext","AppBar","Toolbar","FormControl","Select","MenuItem","Background","App","ThemeProvider","src","process","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.5023bebe.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#212121',\n    },\n    secondary: {\n      main: '#7c4dff',\n    },\n    error: {\n      main: '#f44336',\n    },\n    background: {\n      default: '#b3e5fc',\n    },\n  },\n});\n\nexport default theme;\n","import * as Yup from 'yup';\nimport { defineMessages } from 'react-intl';\n\nconst i18n = defineMessages({\n  phoneRequired: {\n    id: 'phoneRequired',\n    defaultMessage: 'Введите номер',\n  },\n  invalidNumber: {\n    id: 'invalidNumber',\n    defaultMessage: 'Некорректный номер',\n  },\n  amountLimit: {\n    id: 'amountLimit',\n    defaultMessage: 'Сумма не должна превышать 1000₽',\n  },\n\n  enterAmount: {\n    id: 'enterAmount',\n    defaultMessage: 'Введите сумму платежа',\n  },\n});\n\nconst phoneRegExp = /^((8|\\+7)[- ]?)?(\\(?\\d{3}\\)?[- ]?)?[\\d\\- ]{7,10}$/;\n\nexport const PaymentSchema = Yup.object().shape({\n  phoneNumber: Yup.string()\n    .required(i18n.phoneRequired.id)\n    .matches(phoneRegExp, i18n.invalidNumber.id),\n  price: Yup.number().min(1, '').max(1000, i18n.amountLimit.id).required(i18n.enterAmount.id),\n});\n","import React, { Fragment } from 'react';\nimport { useField, ErrorMessage } from 'formik';\nimport TextField from '@material-ui/core/TextField';\nimport MaskedInput from 'react-input-mask';\nimport styled from 'styled-components';\nimport { useIntl } from 'react-intl';\n\nexport const TextError = styled.div`\n  color: red;\n  @media (min-width: 320px) {\n    font-size: 14px;\n  }\n`;\ninterface Values {\n  name: string;\n  type?: string;\n  required?: boolean;\n  id: string;\n  label: string;\n  variant: any;\n}\n\n//Компонент\nconst MyMaskField: React.FC<Values> = ({ id, name, variant, type, label }) => {\n  const [field, meta] = useField(name);\n  const intl = useIntl();\n  return (\n    <Fragment>\n      <MaskedInput\n        mask=\"+7 (999) 999 99 99\"\n        value={field.value}\n        onChange={field.onChange}\n        onBlur={field.onBlur}>\n        {(inputProps) => (\n          <TextField\n            {...inputProps}\n            id={id}\n            type={type}\n            label={label}\n            error={!!meta.touched && !!meta.error}\n            variant={variant}\n            name={name}\n          />\n        )}\n      </MaskedInput>\n      <div style={{ height: '25px' }}>\n        <ErrorMessage\n          name={name}\n          render={(id) => <TextError>{intl.formatMessage({ id })}</TextError>}\n        />\n      </div>\n    </Fragment>\n  );\n};\n\nexport default MyMaskField;\n","import React, { Fragment } from 'react';\nimport { useField, ErrorMessage } from 'formik';\nimport TextField from '@material-ui/core/TextField';\nimport { TextError } from './InputWithMask';\nimport { useIntl } from 'react-intl';\n\ninterface Values {\n  name: string;\n  type?: string;\n  required?: boolean;\n  id: string;\n  label: string;\n  variant: any;\n}\n\nconst MyTextField: React.FC<Values> = ({ id, name, type, variant, label }) => {\n  const [field, meta] = useField({ id, name, type });\n  const intl = useIntl();\n\n  return (\n    <Fragment>\n      <TextField\n        variant={variant}\n        autoComplete=\"off\"\n        label={label}\n        id={id}\n        name={name}\n        type={type}\n        value={field.value}\n        onBlur={field.onBlur}\n        onChange={field.onChange}\n        error={!!meta.touched && !!meta.error}\n      />\n      <div style={{ height: '25px' }}>\n        <TextError>\n          <ErrorMessage name={name} render={(id) => <div>{intl.formatMessage({ id })}</div>} />\n        </TextError>\n      </div>\n    </Fragment>\n  );\n};\n\nexport default MyTextField;\n","import React, { ReactElement } from 'react';\nimport { Form } from 'formik';\nimport MyTextField from './Input';\nimport MyMaskField from './InputWithMask';\nimport Button from '@material-ui/core/Button';\nimport { CircularProgress } from 'material-ui';\nimport { injectIntl, FormattedMessage, defineMessages } from 'react-intl';\n\nconst i18n = defineMessages({\n  phoneLabel: {\n    id: 'phoneNumber',\n    defaultMessage: 'Номер телефона',\n  },\n  priceLabel: {\n    id: 'price',\n    defaultMessage: 'Сумма платежа',\n  },\n});\n\ninterface Props {\n  isLoading?: boolean;\n  intl: any;\n}\nexport const Forma = ({ isLoading = false, intl }: Props): ReactElement<Props> => {\n  return (\n    <Form>\n      <MyMaskField\n        variant=\"outlined\"\n        label={intl.formatMessage(i18n.phoneLabel)}\n        name=\"phoneNumber\"\n        id=\"phoneNumber\"\n        type=\"string\"\n        required\n      />\n\n      <MyTextField\n        variant=\"outlined\"\n        label={intl.formatMessage(i18n.priceLabel)}\n        name=\"price\"\n        id=\"price\"\n        type=\"number\"\n        required\n      />\n      {!isLoading && (\n        <Button variant=\"outlined\" type=\"submit\">\n          <FormattedMessage id=\"pay\" defaultMessage=\"Оплатить\" />\n        </Button>\n      )}\n      {isLoading && (\n        <Button variant=\"outlined\" type=\"submit\" disabled>\n          <FormattedMessage id=\"payment\" defaultMessage=\"Оплата\" />\n          <CircularProgress color=\"#6200EA\" />\n        </Button>\n      )}\n    </Form>\n  );\n};\nexport default injectIntl(Forma);\n","import React, { useState, ReactElement } from 'react';\nimport { Formik, FormikHelpers } from 'formik';\nimport { motion } from 'framer-motion';\nimport styled from 'styled-components';\nimport { PaymentSchema } from './PaymentSchema';\nimport Forma from './PaymentForm.view';\nimport { FormattedMessage, useIntl, defineMessages } from 'react-intl';\n\n///STYLE\nconst BlockForm = styled.section`\n  display: inline-block;\n  align-self: center;\n  align-items: center;\n  /* padding: 30px 80px 60px 80px; */\n  background: white;\n  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n  input[type='number'] {\n    -moz-appearance: textfield;\n  }\n\n  input::-webkit-outer-spin-button,\n  input::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n  }\n\n  @media (min-width: 320px) {\n    margin: auto;\n    align-self: flex-start;\n    align-items: flex-start;\n    padding: 10px 50px 30px 50px;\n  }\n`;\n\nconst Title = styled.h1`\n  margin-bottom: 60px;\n  font-size: 30px;\n  font-family: 'Officina Serif' !important;\n  font-weight: 700 !important;\n  color: #120338;\n\n  @media (max-width: 320px) {\n    font-size: 25px;\n    margin-bottom: 30px;\n  }\n`;\n\nconst sleep = (time) => new Promise((acc) => setTimeout(acc, time));\n\ninterface FormValues {\n  phoneNumber: string | number;\n  price: string;\n}\n\nconst initialValues: FormValues = {\n  phoneNumber: '',\n  price: '',\n};\n\nconst i18n = defineMessages({\n  successMsg: {\n    id: 'successMsg',\n    defaultMessage: 'Оплата мобильной связи прошла успешно!',\n  },\n  failMsg: {\n    id: 'failMsg',\n    defaultMessage: 'Произошла ошибка! Повторите операцию',\n  },\n});\n\n//Компонент\nconst MyForm: React.FC = (props) => {\n  const intl = useIntl();\n  const successMsg = [i18n.successMsg, i18n.failMsg];\n\n  const [isLoading, setLoading] = useState(false);\n\n  const handleSubmit = async (values: FormValues, formikHelpers: FormikHelpers<FormValues>) => {\n    setLoading(true);\n    await sleep(3000);\n    setLoading(false);\n    await sleep(1);\n    alert(intl.formatMessage(successMsg[Math.round(Math.random())]));\n  };\n\n  return (\n    <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 0.5 }}>\n      <BlockForm>\n        <Title>\n          <FormattedMessage id=\"replenishAccounts\" defaultMessage=\"Пополнить счёт\" />\n        </Title>\n        <Formik\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          validationSchema={PaymentSchema}\n          component={(): ReactElement => <Forma isLoading={isLoading} />}\n        />\n      </BlockForm>\n    </motion.div>\n  );\n};\n\nexport default MyForm;\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport styled from 'styled-components';\nimport fakeData from '../fakeData/operators.json';\nimport { motion } from 'framer-motion';\nimport MyForm from '../components/form/PaymentForm.form';\nimport { FormattedMessage } from 'react-intl';\n\ninterface FakeData {\n  id: string;\n  name: string;\n  title: string;\n  url: string;\n  alt: string;\n}\n\nconst Root = styled.main`\n  max-width: 1280px;\n  margin: 0 auto;\n  padding-left: 15px;\n`;\n\nconst SelectedOperator = styled.h1`\n  font-size: 41px;\n  font-family: 'Officina Serif' !important;\n  font-weight: 700 !important;\n  padding: 100px 0 40px;\n  color: black;\n\n  @media (max-width: 320px) {\n    font-size: 21px;\n    padding: 80px 0 30px;\n  }\n\n  @media (max-width: 375px) {\n    font-size: 21px;\n    padding: 80px 0 30px;\n  }\n\n  @media (max-width: 360px) {\n    font-size: 21px;\n    padding: 80px 0 30px;\n  }\n`;\n\nconst Payment: React.FC<FakeData> = () => {\n  const { id } = useParams();\n\n  const operator = (fake) => {\n    return fake.id === id;\n  };\n\n  return (\n    <Root>\n      <motion.div\n        initial={{ x: 280 }}\n        animate={{ x: 0 }}\n        transition={{ delay: 0.2, type: 'spring' }}>\n        <SelectedOperator>\n          <FormattedMessage id=\"selectedOperator\" defaultMessage=\"Выбранный оператор: \" />\n          {fakeData.find(operator).name}\n        </SelectedOperator>\n      </motion.div>\n      <MyForm />\n    </Root>\n  );\n};\n\nexport default Payment;\n","import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport { NavLink } from 'react-router-dom';\nimport { motion } from 'framer-motion';\nimport { FormattedMessage } from 'react-intl';\n\nconst useStyles = makeStyles(() =>\n  createStyles({\n    img: {\n      height: '150px',\n      objectFit: 'contain',\n      textDecorationLine: 'none',\n    },\n  }),\n);\n\ninterface Values {\n  alt: string;\n  image: string;\n  title: string;\n  id: string;\n}\n\nconst ImgMediaCard1: React.FC<Values> = ({ alt, image, title, id }) => {\n  const classes = useStyles();\n\n  return (\n    <NavLink to={`/payment/${id}`}>\n      <motion.div whileHover={{ scale: 1.2 }} whileTap={{ scale: 0.8 }}>\n        <Card>\n          <CardActionArea>\n            <CardMedia\n              component=\"img\"\n              alt={alt}\n              image={image}\n              title={title}\n              className={classes.img}\n            />\n          </CardActionArea>\n          <CardActions>\n            <Button size=\"small\" color=\"primary\">\n              <FormattedMessage id=\"toApBalance\" defaultMessage=\"Пополнить баланс\" />\n            </Button>\n          </CardActions>\n        </Card>\n      </motion.div>\n    </NavLink>\n  );\n};\n\nexport default ImgMediaCard1;\n","import React from 'react';\nimport ImgMediaCard1 from '../components/card/Card';\nimport { motion } from 'framer-motion';\nimport fakeData from '../fakeData/operators.json';\nimport styled from 'styled-components';\nimport { FormattedMessage } from 'react-intl';\n\nconst Root = styled.main`\n  max-width: 1280px;\n  margin: 0 auto;\n`;\n\nconst Choose = styled.h1`\n  margin-left: 20px;\n  font-size: 41px;\n  font-family: 'Officina Serif' !important;\n  font-weight: 700 !important;\n  padding: 200px 0 40px;\n  color: black;\n\n  @media (max-width: 375px) {\n    font-size: 30px;\n    padding: 70px 0 10px;\n  }\n\n  @media (max-width: 320px) {\n    font-size: 25px;\n    padding: 70px 0 10px;\n  }\n`;\n\nconst Grid = styled.section`\n  display: grid;\n  margin: 20px;\n  grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));\n  grid-gap: 50px 70px;\n  justify-items: center;\n  align-items: center;\n`;\n\nconst Main = () => {\n  return (\n    <Root>\n      <motion.div\n        initial={{ y: -250 }}\n        animate={{ y: -20 }}\n        transition={{ delay: 0.2, type: 'spring' }}>\n        <Choose>\n          <FormattedMessage id=\"chooseOperator\" defaultMessage=\"Выберите оператора\" />\n        </Choose>\n      </motion.div>\n      <Grid>\n        {fakeData.map((operator) => (\n          <ImgMediaCard1\n            key={operator.id}\n            alt={operator.alt}\n            image={operator.url}\n            title={operator.title}\n            id={operator.id}\n          />\n        ))}\n      </Grid>\n    </Root>\n  );\n};\n\nexport default Main;\n","import React, { useState } from 'react';\nimport { IntlProvider } from 'react-intl';\nimport en from '../../lang/en-US.json';\nimport ru from '../../lang/ru-RU.json';\n\nexport const LocaleContext = React.createContext();\n\nconst local = navigator.language.slice(0, 2);\n\nlet lang;\nif (local === 'ru') {\n  lang = ru;\n} else {\n  lang = en;\n}\n\nconst WrapperLocale = (props) => {\n  const [locale, setLocale] = useState(local);\n  const [messages, setMessages] = useState(lang);\n\n  const selectLang = (e) => {\n    const newLocale = e.target.value;\n    setLocale(newLocale);\n    if (newLocale === 'en') {\n      setMessages(en);\n    } else {\n      setMessages(ru);\n    }\n  };\n\n  return (\n    <LocaleContext.Provider value={{ locale, selectLang }}>\n      <IntlProvider messages={messages} locale={locale}>\n        {props.children}\n      </IntlProvider>\n    </LocaleContext.Provider>\n  );\n};\n\nexport default WrapperLocale;\n","export const PagesPath = {\n  main: '/',\n  payment: '/payment/:id',\n};\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport PaymentPage from '../../pages/PaymentPage';\nimport Main from '../../pages/MainPage';\nimport { PagesPath } from './PagesPath';\n\nconst Router = () => {\n  return (\n    <Switch>\n      <Route exact path={PagesPath.main} component={Main} />\n      <Route path={PagesPath.payment} component={PaymentPage} />\n    </Switch>\n  );\n};\n\nexport default Router;\n","import React, { useContext } from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport { LocaleContext } from '../local/locale';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport { white } from 'material-ui/styles/colors';\nimport { FormattedMessage } from 'react-intl';\n\nconst useStyles = makeStyles((theme) =>\n  createStyles({\n    formControl: {\n      color: white,\n      margin: theme.spacing(1),\n      minWidth: 120,\n    },\n    selectEmpty: {\n      color: white,\n      backgroundColor: '#212121',\n      marginTop: theme.spacing(2),\n    },\n    icon: {\n      color: white,\n    },\n  }),\n);\n\nconst Header = () => {\n  const classes = useStyles();\n\n  const context = useContext(LocaleContext);\n\n  return (\n    <AppBar>\n      <Toolbar>\n        <FormControl className={classes.formControl}>\n          <Select\n            value={context.locale}\n            className={classes.selectEmpty}\n            onChange={context.selectLang}\n            classes={{\n              icon: classes.icon,\n            }}\n            variant=\"standard\"\n            inputProps={{ 'aria-label': 'Without label' }}>\n            <MenuItem value=\"ru\">\n              <FormattedMessage id=\"ru\" defaultMessage=\"Русский\" />\n            </MenuItem>\n            <MenuItem value=\"en\">\n              <FormattedMessage id=\"en\" defaultMessage=\"English\" />\n            </MenuItem>\n          </Select>\n        </FormControl>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","import React, { Fragment } from 'react';\nimport { HashRouter } from 'react-router-dom';\nimport { ThemeProvider } from '@material-ui/core';\nimport theme from './theme';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport Router from './components/router/Router';\nimport Header from './components/header/Header';\nimport styled from 'styled-components';\n\nconst Background = styled.img`\n  position: fixed;\n  z-index: -1;\n  top: 0;\n  left: -6px;\n  filter: blur(3px);\n  min-width: 100%;\n  min-height: 100%;\n`;\n\nconst App = () => {\n  return (\n    <HashRouter>\n      <ThemeProvider theme={theme}>\n        <MuiThemeProvider>\n          <Fragment>\n            <Background src={process.env.PUBLIC_URL + '/images/background.jpeg'} id=\"bg\" alt=\"\" />\n            <Header />\n            <Router />\n          </Fragment>\n        </MuiThemeProvider>\n      </ThemeProvider>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport WrapperLocale from './components/local/locale';\n\nReactDOM.render(\n  <WrapperLocale>\n    <App />\n  </WrapperLocale>,\n  document.getElementById('root'),\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}