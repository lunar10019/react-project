{"version":3,"sources":["components/card/Card.tsx","pages/MainPage.tsx","theme.tsx","components/header/Header.tsx","components/form/InputWithMask.tsx","components/form/Input.tsx","components/form/myForm.tsx","pages/Payment.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ImgMediaCard1","alt","image","title","id","to","div","whileHover","scale","whileTap","Card","CardActionArea","CardMedia","component","CardActions","Button","size","color","H","styled","h1","Grid","section","Main","initial","y","animate","transition","delay","type","fakeData","map","operator","url","theme","createMuiTheme","palette","primary","main","secondary","error","background","default","Header","AppBar","Toolbar","TextError","TextMaskCustom","props","inputRef","other","ref","inputElement","mask","MyMaskField","name","variant","label","useField","field","meta","className","TextField","value","onChange","autoComplete","InputProps","inputComponent","touched","MyTextField","BlockForm","Indent","Title","sleep","time","Promise","acc","setTimeout","initialValues","phoneNumber","price","PaymentSchema","Yup","shape","required","matches","min","max","Forma","successMsg","useState","isLoading","setLoading","handleSubmit","values","formikHelpers","a","alert","Math","round","random","React","textmask","setValues","opacity","onSubmit","validationSchema","handleChange","event","target","isSubmitting","handleBlur","dirty","disabled","SelectedOperator","ContainerPayment","Payment","useParams","x","find","fake","AppWrapper","App","ThemeProvider","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"+zBAmCeA,EAnByB,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,IAAKC,EAAuB,EAAvBA,MAAOC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAC5D,OACE,kBAAC,IAAD,CAASC,GAAE,mBAAcD,IACvB,kBAAC,IAAOE,IAAR,CAAYC,WAAY,CAAEC,MAAO,KAAOC,SAAU,CAAED,MAAO,KACzD,kBAACE,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAWC,UAAU,MAAMZ,IAAKA,EAAKC,MAAOA,EAAOC,MAAOA,KAE5D,kBAACW,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQC,MAAM,WAA3B,oG,2rCCnBZ,IAAMC,EAAIC,IAAOC,GAAV,KAkBDC,EAAOF,IAAOG,QAAV,KA+DKC,EAzBF,WACX,OACE,6BACE,kBAAC,IAAOjB,IAAR,CACEkB,QAAS,CAAEC,GAAI,KACfC,QAAS,CAAED,GAAI,IACfE,WAAY,CAAEC,MAAO,GAAKC,KAAM,WAChC,kBAACX,EAAD,iHAEF,kBAACG,EAAD,KACGS,EAASC,KAAI,SAACC,GAAD,OACZ,6BACE,kBAAC,EAAD,CACE/B,IAAK+B,EAAS/B,IACdC,MAAO8B,EAASC,IAChB9B,MAAO6B,EAAS7B,MAChBC,GAAI4B,EAAS5B,Y,0BC1DZ8B,EAjBDC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,KAAM,WAERC,UAAW,CACTD,KAAM,WAERE,MAAO,CACLF,KAAM,WAERG,WAAY,CACVC,QAAS,c,oCCHAC,EARU,WACvB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,Q,6SCDC,IAAMC,EAAY3B,IAAOb,IAAV,KAyBhByC,EAAiB,SAACC,GAAgC,IAC9CC,EAAuBD,EAAvBC,SAAaC,EADgC,YACtBF,EADsB,cAGrD,OACE,kBAAC,IAAD,iBACME,EADN,CAEEC,IAAG,+GAAE,SAACA,GACJF,EAASE,EAAMA,EAAIC,aAAe,SAEpCC,KAAK,yBA4BIC,EAvBuB,SAAC,GAAwC,IAAtClD,EAAqC,EAArCA,GAAImD,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,QAAS3B,EAAkB,EAAlBA,KAAM4B,EAAY,EAAZA,MAAY,EACtDC,YAASH,GAD6C,mBACrEI,EADqE,KAC9DC,EAD8D,KAE5E,OACE,yBAAKC,UAAU,SACb,kBAACC,EAAA,EAAD,CACEL,MAAOA,EACPM,MAAOJ,EAAMI,MACbC,SAAUL,EAAMK,SAChBC,aAAa,MACb7D,GAAIA,EACJmD,KAAMA,EACN1B,KAAMA,EACN2B,QAASA,EACTU,WAAY,CACVC,eAAgBpB,GAElBP,QAASoB,EAAKQ,WAAaR,EAAKpB,QAEjCoB,EAAKQ,SAAWR,EAAKpB,MAAQ,kBAACM,EAAD,KAAYc,EAAKpB,OAAqB,OC5B3D6B,EArBuB,SAAC,GAAwC,IAAtCjE,EAAqC,EAArCA,GAAImD,EAAiC,EAAjCA,KAAM1B,EAA2B,EAA3BA,KAAM2B,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MAAY,EACtDC,YAAS,CAAEtD,KAAImD,OAAM1B,SADiC,mBACrE8B,EADqE,KAC9DC,EAD8D,KAG5E,OACE,yBAAKC,UAAU,QACb,kBAACC,EAAA,EAAD,CACEN,QAASA,EACTS,aAAa,MACbR,MAAOA,EACPrD,GAAIA,EACJmD,KAAMA,EACN1B,KAAMA,EACNkC,MAAOJ,EAAMI,MACbC,SAAUL,EAAMK,SAChBxB,QAASoB,EAAKQ,WAAaR,EAAKpB,QAEjCoB,EAAKQ,SAAWR,EAAKpB,MAAQ,kBAACM,EAAD,KAAYc,EAAKpB,OAAqB,O,w/BCnB1E,IAAM8B,EAAYnD,IAAOG,QAAV,KAwBTiD,GAASpD,IAAOG,QAAV,KAINkD,GAAQrD,IAAOC,GAAV,KAaLqD,GAAQ,SAACC,GAAD,OAAU,IAAIC,SAAQ,SAACC,GAAD,OAASC,WAAWD,EAAKF,OAOvDI,GAA4B,CAChCC,YAAa,GACbC,MAAO,IASHC,GAAgBC,MAAaC,MAAM,CACvCJ,YAAaG,MAAaE,SAAS,6EAAiBC,QAHlC,sDAGuD,2GACzEL,MAAOE,MACJI,IAAI,EAAG,IACPC,IAAI,IAAM,sJACVH,SAAS,0HA2FCI,GAvFS,SAACxC,GACvB,IAAMyC,EAAa,CACjB,8MACA,wMAH+B,EAMDC,oBAAS,GANR,mBAM1BC,EAN0B,KAMfC,EANe,KAQ3BC,EAAY,uCAAG,WAAOC,EAAoBC,GAA3B,SAAAC,EAAA,6DACnBJ,GAAW,GADQ,SAEbnB,GAAM,KAFO,cAGnBmB,GAAW,GAHQ,SAIbnB,GAAM,GAJO,OAKnBwB,MAAMR,EAAWS,KAAKC,MAAMD,KAAKE,YALd,2CAAH,wDARe,EAgBLC,IAAMX,SAAgB,CAChDY,SAAU,KAjBqB,mBAgB1BR,EAhB0B,KAgBlBS,EAhBkB,KA2BjC,OACE,kBAAC,IAAOjG,IAAR,CAAYkB,QAAS,CAAEgF,QAAS,GAAK9E,QAAS,CAAE8E,QAAS,GAAK7E,WAAY,CAAEC,MAAO,KACjF,kBAAC0C,EAAD,KACE,6BACE,kBAACE,GAAD,yFAEF,kBAAC,IAAD,CACEM,cAAeA,GACf2B,SAAUZ,EACVa,iBAAkBzB,GAClB0B,aAjBa,SAACC,GACpBL,EAAU,2BACLT,GADI,kBAENc,EAAMC,OAAOtD,KAAOqD,EAAMC,OAAO9C,UAe9B+C,cAAY,EACZC,YAAU,EACVC,OAAK,IACJ,WACC,OACE,kBAAC,IAAD,KACE,kBAACzC,GAAD,KACE,kBAAC,EAAD,CACEf,QAAQ,WACRC,MAAM,kFACN6C,SAAS,GACT/C,KAAK,cACLnD,GAAG,cACHyB,KAAK,SACLuD,UAAQ,KAGZ,kBAACb,GAAD,KACE,kBAAC,EAAD,CACEf,QAAQ,WACRC,MAAM,4EACNF,KAAK,QACLnD,GAAG,QACHyB,KAAK,SACLuD,UAAQ,KAGZ,8BACIO,GACA,kBAAC5E,EAAA,EAAD,CAAQyC,QAAQ,WAAW3B,KAAK,UAAhC,oDAID8D,GACC,kBAAC5E,EAAA,EAAD,CAAQyC,QAAQ,WAAW3B,KAAK,SAASoF,UAAQ,GAAjD,0CAEE,kBAAC,IAAD,CAAkBhG,MAAM,qB,kzBClJ9C,IAAMiG,GAAmB/F,IAAOC,GAAV,MA2BhB+F,GAAmBhG,IAAOG,QAAV,MAyCP8F,GAvBmB,WAAO,IAC/BhH,EAAOiH,cAAPjH,GAKR,OACE,6BACE,kBAAC,IAAOE,IAAR,CACEkB,QAAS,CAAE8F,EAAG,KACd5F,QAAS,CAAE4F,EAAG,GACd3F,WAAY,CAAEC,MAAO,GAAKC,KAAM,WAChC,kBAACqF,GAAD,iHAAuCpF,EAASyF,MATrC,SAACC,GAChB,OAAOA,EAAKpH,IAAMA,KAQiDmD,OAEjE,kBAAC4D,GAAD,KACE,6BACE,kBAAC,GAAD,U,ixBCjDV,IAAMM,GAAatG,IAAOG,QAAV,MAmEDoG,GAtBuB,WACpC,OACE,kBAAC,IAAD,KACE,6BACE,kBAACC,EAAA,EAAD,CAAezF,MAAOA,GACpB,kBAAC,IAAD,KACE,6BACE,kBAAC,EAAD,OAEF,kBAACuF,GAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,IAAIhH,UAAWU,IACjC,kBAAC,IAAD,CAAOsG,KAAK,eAAehH,UAAWuG,YChElCU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,GAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAArG,GACLsG,QAAQtG,MAAMA,EAAMuG,c","file":"static/js/main.9231cc02.chunk.js","sourcesContent":["import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport { NavLink } from 'react-router-dom';\nimport { motion } from 'framer-motion';\n\ninterface Values {\n  alt: string;\n  image: string;\n  title: string;\n  id: any;\n}\n\nconst ImgMediaCard1: React.FC<Values> = ({ alt, image, title, id }) => {\n  return (\n    <NavLink to={`/payment/${id}`}>\n      <motion.div whileHover={{ scale: 1.2 }} whileTap={{ scale: 0.8 }}>\n        <Card>\n          <CardActionArea>\n            <CardMedia component=\"img\" alt={alt} image={image} title={title} />\n          </CardActionArea>\n          <CardActions>\n            <Button size=\"small\" color=\"primary\">\n              Пополнить баланс\n            </Button>\n          </CardActions>\n        </Card>\n      </motion.div>\n    </NavLink>\n  );\n};\n\nexport default ImgMediaCard1;\n","import React from 'react';\nimport ImgMediaCard1 from '../components/card/Card';\nimport { motion } from 'framer-motion';\nimport fakeData from '../fakeData/operators.json';\nimport styled from 'styled-components';\n\nconst H = styled.h1`\n  font-size: 41px;\n  font-family: 'Officina Serif' !important;\n  font-weight: 700 !important;\n  padding: 200px 0 40px;\n  color: black;\n\n  @media (max-width: 375px) {\n    font-size: 30px;\n    padding: 70px 0 10px;\n  }\n\n  @media (max-width: 320px) {\n    font-size: 25px;\n    padding: 70px 0 10px;\n  }\n`;\n\nconst Grid = styled.section`\n  display: grid;\n  width: 100%;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-gap: 50px 70px;\n  justify-items: center;\n  align-items: center;\n\n  @media (max-width: 1380px) {\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 30px 20px;\n  }\n\n  @media (max-width: 1000px) {\n    grid-template-columns: 1fr;\n    grid-gap: 50px 20px;\n    justify-items: start;\n  }\n\n  @media (max-width: 600px) {\n    grid-template-columns: 1fr;\n    grid-gap: 50px 20px;\n    justify-items: start;\n  }\n\n  @media (max-width: 375px) {\n    grid-template-columns: 1fr;\n    grid-gap: 20px;\n    justify-items: center;\n  }\n\n  @media (max-width: 320px) {\n    grid-template-columns: 1fr;\n    grid-gap: 20px;\n    justify-items: center;\n  }\n`;\n\nconst Main = () => {\n  return (\n    <div>\n      <motion.div\n        initial={{ y: -250 }}\n        animate={{ y: -20 }}\n        transition={{ delay: 0.2, type: 'spring' }}>\n        <H>Выберите оператора</H>\n      </motion.div>\n      <Grid>\n        {fakeData.map((operator) => (\n          <div>\n            <ImgMediaCard1\n              alt={operator.alt}\n              image={operator.url}\n              title={operator.title}\n              id={operator.id}\n            />\n          </div>\n        ))}\n      </Grid>\n    </div>\n  );\n};\n\nexport default Main;\n","import { createMuiTheme } from '@material-ui/core/styles';\n\n// A custom theme for this app\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#212121',\n    },\n    secondary: {\n      main: '#7c4dff',\n    },\n    error: {\n      main: '#f44336',\n    },\n    background: {\n      default: '#b3e5fc',\n    },\n  },\n});\n\nexport default theme;\n","import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\n\nconst Header: React.FC = () => {\n  return (\n    <AppBar>\n      <Toolbar></Toolbar>\n    </AppBar>\n  );\n};\n\nexport default Header;\n","import React from 'react';\nimport { useField } from 'formik';\nimport TextField from '@material-ui/core/TextField';\nimport MaskedInput from 'react-input-mask';\nimport styled from 'styled-components';\n\nexport const TextError = styled.div`\n  color: red;\n  margin-bottom: -18px;\n  margin-right: -50px;\n\n  @media (min-width: 320px) {\n    font-size: 14px;\n  }\n`;\n\ninterface Values {\n  name: string;\n  type?: string;\n  required?: boolean;\n  id: string;\n  textmask: string;\n  label: string;\n  variant: any;\n}\n\ninterface TextMaskCustomProps {\n  inputRef: (ref: HTMLInputElement | null) => void;\n}\n\n//Компонент\nconst TextMaskCustom = (props: TextMaskCustomProps) => {\n  const { inputRef, ...other } = props;\n\n  return (\n    <MaskedInput\n      {...other}\n      ref={(ref: any) => {\n        inputRef(ref ? ref.inputElement : null);\n      }}\n      mask=\"+7 (999) 999 99 99\"\n    />\n  );\n};\n\nconst MyMaskField: React.FC<Values> = ({ id, name, variant, type, label }) => {\n  const [field, meta] = useField(name);\n  return (\n    <div className=\"form2\">\n      <TextField\n        label={label}\n        value={field.value}\n        onChange={field.onChange}\n        autoComplete=\"off\"\n        id={id}\n        name={name}\n        type={type}\n        variant={variant}\n        InputProps={{\n          inputComponent: TextMaskCustom as any,\n        }}\n        error={!!meta.touched && !!meta.error}\n      />\n      {meta.touched && meta.error ? <TextError>{meta.error}</TextError> : null}\n    </div>\n  );\n};\n\nexport default MyMaskField;\n","import React from 'react';\nimport { useField } from 'formik';\nimport TextField from '@material-ui/core/TextField';\nimport { TextError } from './InputWithMask';\n\ninterface Values {\n  name: string;\n  type?: string;\n  required?: boolean;\n  id: string;\n  label: string;\n  variant: any;\n}\n\nconst MyTextField: React.FC<Values> = ({ id, name, type, variant, label }) => {\n  const [field, meta] = useField({ id, name, type });\n\n  return (\n    <div className=\"form\">\n      <TextField\n        variant={variant}\n        autoComplete=\"off\"\n        label={label}\n        id={id}\n        name={name}\n        type={type}\n        value={field.value}\n        onChange={field.onChange}\n        error={!!meta.touched && !!meta.error}\n      />\n      {meta.touched && meta.error ? <TextError>{meta.error}</TextError> : null}\n    </div>\n  );\n};\n\nexport default MyTextField;\n","import React, { useState } from 'react';\nimport { Formik, Form, FormikHelpers } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextField from './Input';\nimport MyMaskField from './InputWithMask';\nimport { motion } from 'framer-motion';\nimport Button from '@material-ui/core/Button';\nimport { CircularProgress } from 'material-ui';\nimport styled from 'styled-components';\n\n///STYLE\nconst BlockForm = styled.section`\n  display: inline-block;\n  align-self: center;\n  align-items: center;\n  padding: 20px 70px 50px 70px;\n  background: white;\n  box-shadow: 0 14px 28px rgba(0, 0, 0, 0.25), 0 10px 10px rgba(0, 0, 0, 0.22);\n  input[type='number'] {\n    -moz-appearance: textfield;\n  }\n\n  input::-webkit-outer-spin-button,\n  input::-webkit-inner-spin-button {\n    -webkit-appearance: none;\n\n    @media (min-width: 320px) {\n      margin: auto;\n      align-self: flex-start;\n      align-items: flex-start;\n      padding: 10px 50px 30px 50px;\n    }\n  }\n`;\n\nconst Indent = styled.section`\n  margin: 25px 0;\n`;\n\nconst Title = styled.h1`\n  margin-bottom: 60px;\n  font-size: 30px;\n  font-family: 'Officina Serif' !important;\n  font-weight: 700 !important;\n  color: #120338;\n\n  @media (max-width: 320px) {\n    font-size: 25px;\n    margin-bottom: 30px;\n  }\n`;\n\nconst sleep = (time) => new Promise((acc) => setTimeout(acc, time));\n\ninterface FormValues {\n  phoneNumber: string | number;\n  price: string;\n}\n\nconst initialValues: FormValues = {\n  phoneNumber: '',\n  price: '',\n};\n\ninterface State {\n  textmask: string;\n}\n\nconst phoneRegExp = /^((8|\\+7)[\\- ]?)?(\\(?\\d{3}\\)?[\\- ]?)?[\\d\\- ]{7,10}$/;\n\nconst PaymentSchema = Yup.object().shape({\n  phoneNumber: Yup.string().required('Введите номер').matches(phoneRegExp, 'Некорректный номер'),\n  price: Yup.number()\n    .min(1, '')\n    .max(1000, 'Сумма не должна превышать 1000₽')\n    .required('Введите сумму платежа'),\n});\n\n//Компонент\nconst Forma: React.FC = (props) => {\n  const successMsg = [\n    'Оплата мобильной связи прошла успешно!',\n    'Произошла ошибка! Повторите операцию',\n  ];\n\n  const [isLoading, setLoading] = useState(false);\n\n  const handleSubmit = async (values: FormValues, formikHelpers: FormikHelpers<FormValues>) => {\n    setLoading(true);\n    await sleep(3000);\n    setLoading(false);\n    await sleep(1);\n    alert(successMsg[Math.round(Math.random())]);\n  };\n\n  const [values, setValues] = React.useState<State>({\n    textmask: '',\n  });\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setValues({\n      ...values,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  return (\n    <motion.div initial={{ opacity: 0 }} animate={{ opacity: 1 }} transition={{ delay: 0.5 }}>\n      <BlockForm>\n        <div>\n          <Title>Пополнить счёт</Title>\n        </div>\n        <Formik\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          validationSchema={PaymentSchema}\n          handleChange={handleChange}\n          isSubmitting\n          handleBlur\n          dirty>\n          {() => {\n            return (\n              <Form>\n                <Indent>\n                  <MyMaskField\n                    variant=\"outlined\"\n                    label=\"Номер телефона\"\n                    textmask=\"\"\n                    name=\"phoneNumber\"\n                    id=\"phoneNumber\"\n                    type=\"string\"\n                    required\n                  />\n                </Indent>\n                <Indent>\n                  <MyTextField\n                    variant=\"outlined\"\n                    label=\"Сумма платежа\"\n                    name=\"price\"\n                    id=\"price\"\n                    type=\"number\"\n                    required\n                  />\n                </Indent>\n                <div>\n                  {!isLoading && (\n                    <Button variant=\"outlined\" type=\"submit\">\n                      Оплатить\n                    </Button>\n                  )}\n                  {isLoading && (\n                    <Button variant=\"outlined\" type=\"submit\" disabled>\n                      Оплата...\n                      <CircularProgress color=\"#6200ea\" />\n                    </Button>\n                  )}\n                </div>\n              </Form>\n            );\n          }}\n        </Formik>\n      </BlockForm>\n    </motion.div>\n  );\n};\n\nexport default Forma;\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport MyForm from '../components/form/myForm';\nimport styled from 'styled-components';\nimport fakeData from '../fakeData/operators.json';\nimport { motion } from 'framer-motion';\n\nconst SelectedOperator = styled.h1`\n  font-size: 41px;\n  font-family: 'Officina Serif' !important;\n  font-weight: 700 !important;\n  padding: 100px 0 40px;\n  color: black;\n\n  @media (max-width: 320px) {\n    font-size: 21px;\n    padding: 80px 0 30px;\n  }\n\n  @media (max-width: 375px) {\n    font-size: 21px;\n    padding: 80px 0 30px;\n  }\n\n  @media (max-width: 360px) {\n    font-size: 21px;\n    padding: 80px 0 30px;\n  }\n`;\n\ninterface Values {\n  fakeData: Array<Object>;\n}\n\nconst ContainerPayment = styled.section`\n  display: flex;\n  justify-content: start;\n\n  @media (max-width: 320px) {\n    font-size: 21px;\n    justify-content: center;\n  }\n\n  @media (max-width: 375px) {\n    justify-content: center;\n  }\n\n  @media (max-width: 500px) {\n    justify-content: center;\n  }\n`;\n\nconst Payment: React.FC<Values> = () => {\n  const { id } = useParams();\n\n  const operator = (fake) => {\n    return fake.id == id;\n  };\n  return (\n    <div>\n      <motion.div\n        initial={{ x: 280 }}\n        animate={{ x: 0 }}\n        transition={{ delay: 0.2, type: 'spring' }}>\n        <SelectedOperator>Выбранный оператор: {fakeData.find(operator).name}</SelectedOperator>\n      </motion.div>\n      <ContainerPayment>\n        <div>\n          <MyForm />\n        </div>\n      </ContainerPayment>\n    </div>\n  );\n};\n\nexport default Payment;\n","import React from 'react';\nimport './App.css';\nimport Main from './pages/MainPage';\nimport { Switch, Route, HashRouter } from 'react-router-dom';\nimport { ThemeProvider } from '@material-ui/core';\nimport theme from './theme';\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport Header from './components/header/Header';\nimport styled from 'styled-components';\nimport Payment from './pages/Payment';\n\n// const Background = styled.div<StyledDivProps>`\n//   background-image: ${(props) => `url(${props.background})`};\n//   backdrop-filter: blur(3px);\n//   background-size: cover;\n//   background-repeat: no-repeat;\n//   height: 100vh;\n// `;\n\nconst AppWrapper = styled.section`\n  display: grid;\n  width: 1280px;\n  margin: 0 auto;\n\n  @media (max-width: 1380px) {\n    display: flex;\n    justify-content: center;\n    width: 900px;\n  }\n\n  @media (max-width: 1000px) {\n    display: flex;\n    justify-content: center;\n    width: 500px;\n  }\n\n  @media (max-width: 600px) {\n    grid-template-columns: 1fr;\n    grid-gap: 50px 20px;\n    justify-items: start;\n  }\n  @media (max-width: 450px) {\n    display: flex;\n    justify-content: center;\n    width: 100%;\n  }\n\n  @media (max-width: 375px) {\n    display: flex;\n    justify-content: center;\n    width: 370px;\n  }\n\n  @media (max-width: 320px) {\n    display: flex;\n    justify-content: center;\n    width: 100%;\n  }\n`;\n\ninterface StyledDivProps {\n  background?: string;\n}\n\nconst App: React.FC<StyledDivProps> = () => {\n  return (\n    <HashRouter>\n      <div>\n        <ThemeProvider theme={theme}>\n          <MuiThemeProvider>\n            <div>\n              <Header />\n            </div>\n            <AppWrapper>\n              <Switch>\n                <Route exact path=\"/\" component={Main} />\n                <Route path=\"/payment/:id\" component={Payment} />\n              </Switch>\n            </AppWrapper>\n          </MuiThemeProvider>\n        </ThemeProvider>\n      </div>\n    </HashRouter>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}