{"ast":null,"code":"var _jsxFileName = \"/home/nastya/ProjectPayment/payment-app/src/components/form/InputWithMask.tsx\";\nimport React from 'react';\nimport { useField } from 'formik';\nimport TextField from '@material-ui/core/TextField';\nimport MaskedInput from 'react-input-mask';\n\n//Компонент\nconst TextMaskCustom = props => {\n  const {\n    inputRef,\n    ...other\n  } = props;\n  return /*#__PURE__*/React.createElement(MaskedInput, Object.assign({}, other, {\n    ref: ref => {\n      inputRef(ref ? ref.inputElement : null);\n    },\n    mask: \"+7 (999) 999 99 99\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }));\n};\n\nconst MyMaskField = ({\n  id,\n  name,\n  variant,\n  type,\n  label\n}) => {\n  const [field, meta] = useField(name); // console.log(meta.error, field.value);\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TextField, {\n    label: label,\n    value: field.value,\n    onChange: field.onChange,\n    autoComplete: \"off\",\n    id: id,\n    name: name,\n    type: type,\n    variant: variant,\n    InputProps: {\n      inputComponent: TextMaskCustom\n    },\n    error: !!meta.error,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }\n  }), meta.touched && meta.error ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"textErrror\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 37\n    }\n  }, meta.error) : null);\n};\n\nexport default MyMaskField;","map":{"version":3,"sources":["/home/nastya/ProjectPayment/payment-app/src/components/form/InputWithMask.tsx"],"names":["React","useField","TextField","MaskedInput","TextMaskCustom","props","inputRef","other","ref","inputElement","MyMaskField","id","name","variant","type","label","field","meta","value","onChange","inputComponent","error","touched"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,WAAP,MAAwB,kBAAxB;;AAgBA;AACA,MAAMC,cAAc,GAAIC,KAAD,IAAgC;AACrD,QAAM;AAAEC,IAAAA,QAAF;AAAY,OAAGC;AAAf,MAAyBF,KAA/B;AAEA,sBACE,oBAAC,WAAD,oBACME,KADN;AAEE,IAAA,GAAG,EAAGC,GAAD,IAAc;AACjBF,MAAAA,QAAQ,CAACE,GAAG,GAAGA,GAAG,CAACC,YAAP,GAAsB,IAA1B,CAAR;AACD,KAJH;AAKE,IAAA,IAAI,EAAC,oBALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AASD,CAZD;;AAcA,MAAMC,WAA6B,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,IAAN;AAAYC,EAAAA,OAAZ;AAAqBC,EAAAA,IAArB;AAA2BC,EAAAA;AAA3B,CAAD,KAAwC;AAC5E,QAAM,CAACC,KAAD,EAAQC,IAAR,IAAgBhB,QAAQ,CAACW,IAAD,CAA9B,CAD4E,CAE5E;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,KAAK,EAAEG,KADT;AAEE,IAAA,KAAK,EAAEC,KAAK,CAACE,KAFf;AAGE,IAAA,QAAQ,EAAEF,KAAK,CAACG,QAHlB;AAIE,IAAA,YAAY,EAAC,KAJf;AAKE,IAAA,EAAE,EAAER,EALN;AAME,IAAA,IAAI,EAAEC,IANR;AAOE,IAAA,IAAI,EAAEE,IAPR;AAQE,IAAA,OAAO,EAAED,OARX;AASE,IAAA,UAAU,EAAE;AACVO,MAAAA,cAAc,EAAEhB;AADN,KATd;AAYE,IAAA,KAAK,EAAE,CAAC,CAACa,IAAI,CAACI,KAZhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAeGJ,IAAI,CAACK,OAAL,IAAgBL,IAAI,CAACI,KAArB,gBAA6B;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAA6BJ,IAAI,CAACI,KAAlC,CAA7B,GAA8E,IAfjF,CADF;AAmBD,CAtBD;;AAwBA,eAAeX,WAAf","sourcesContent":["import React from 'react';\nimport { useField } from 'formik';\nimport TextField from '@material-ui/core/TextField';\nimport MaskedInput from 'react-input-mask';\n\ninterface Values {\n  name: string;\n  type?: string;\n  required?: boolean;\n  id: string;\n  textmask: string;\n  label: string;\n  variant: any;\n}\n\ninterface TextMaskCustomProps {\n  inputRef: (ref: HTMLInputElement | null) => void;\n}\n\n//Компонент\nconst TextMaskCustom = (props: TextMaskCustomProps) => {\n  const { inputRef, ...other } = props;\n\n  return (\n    <MaskedInput\n      {...other}\n      ref={(ref: any) => {\n        inputRef(ref ? ref.inputElement : null);\n      }}\n      mask=\"+7 (999) 999 99 99\"\n    />\n  );\n};\n\nconst MyMaskField: React.FC<Values> = ({ id, name, variant, type, label }) => {\n  const [field, meta] = useField(name);\n  // console.log(meta.error, field.value);\n  return (\n    <div className=\"form2\">\n      <TextField\n        label={label}\n        value={field.value}\n        onChange={field.onChange}\n        autoComplete=\"off\"\n        id={id}\n        name={name}\n        type={type}\n        variant={variant}\n        InputProps={{\n          inputComponent: TextMaskCustom as any,\n        }}\n        error={!!meta.error}\n      />\n      {meta.touched && meta.error ? <div className=\"textErrror\">{meta.error}</div> : null}\n    </div>\n  );\n};\n\nexport default MyMaskField;\n"]},"metadata":{},"sourceType":"module"}