{"ast":null,"code":"var _jsxFileName = \"/home/nastya/myProject (copy)/my-app/src/components/Imputs/inputs.tsx\";\nimport React, { useState } from \"react\";\nimport { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport MyTextField from \"./use\";\nimport MaskedInput from \"react-text-mask\";\nimport MyMaskField from './use.Mask';\nimport Modal from \"react-modal\";\nimport styled from 'styled-components';\nconst Button = styled.button`\nborder: none;\nbackground-color: #1f2229;\nfont-family: \"AvenirNextCyrRegular\", sans-serif;\nfont-size: 18px;\ntransition: all 0.15s;\ncursor: pointer;\nwidth: 250px;\nheight: 60px;\nborder-radius: 2px;\ncolor: #fff;\nmargin: 12px 0;\n&:hover { \nbackground: rgba(0,0,0,0); \ncolor: #000000; \nbox-shadow: inset 0 0 0 3px #000000\n}\n`;\nconst initialValues = {\n  phoneNumber: \"\",\n  price: \"\",\n  nam: \"\"\n};\n\n//Компонент\nconst TextMaskCustom = props => {\n  const {\n    inputRef,\n    ...other\n  } = props;\n  return /*#__PURE__*/React.createElement(MaskedInput, Object.assign({}, other, {\n    ref: ref => {\n      inputRef(ref ? ref.inputElement : null);\n    },\n    mask: [\"+\", \"7\", \" \", \"(\", /[7-9]/, /\\d/, /\\d/, \")\", \" \", /\\d/, /\\d/, \"-\", /\\d/, /\\d/, \"-\", /\\d/, /\\d/, /\\d/],\n    placeholderChar: '\\u2000',\n    showMask: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst PaymentSchema = Yup.object().shape({\n  phoneNumber: Yup.string().required(\"Введите номер\").length(18, \"error\"),\n  price: Yup.number().min(1, \"\").max(1000, \"Сумма не должна превышать 1000₽\").required(\"Введите сумму платежа\")\n}); //Компонент\n\nconst NewInput = props => {\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [modalIsOpe, setModalIsOpen1] = useState(false);\n  const successMsg = ['Оплата мобильной связи прошла успешно', 'Произошла ошибка! Повторите операцию']; // const arrModal = [\n  //     setModalIsOpen(true),\n  //     setModalIsOpen1(true)\n  // ]\n  //     const handleSubmit = (values: FormValues): void => {\n  //     return (\n  //     alert(successMsg[Math.floor(Math.random() * successMsg.length)])\n  // )\n  //     };\n  // const handleSubmit = (values: FormValues): void => {\n  //   alert[Math.floor(Math.random() * arrModal.length)]\n  //      }\n\n  const handleSubmit = values => {\n    setModalIsOpen(true);\n  };\n\n  const [values, setValues] = React.useState({\n    textmask: ''\n  });\n\n  const handleChange = event => {\n    setValues({ ...values,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Spring, {\n    from: {\n      opacity: 0\n    },\n    to: {\n      opacity: 1\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 9\n    }\n  }, \"\\u041F\\u043E\\u043F\\u043E\\u043B\\u043D\\u0438\\u0442\\u044C \\u0441\\u0447\\u0451\\u0442\")), /*#__PURE__*/React.createElement(Formik, {\n    initialValues: initialValues,\n    onSubmit: handleSubmit,\n    validationSchema: PaymentSchema,\n    handleChange: handleChange,\n    dirty: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 9\n    }\n  }, () => {\n    return /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(MyMaskField, {\n      label: \"\\u041D\\u043E\\u043C\\u0435\\u0440 \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\\u0430\",\n      textmask: \"\",\n      name: \"phoneNumber\",\n      id: \"phoneNumber\",\n      type: \"string\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(MyTextField, {\n      label: \"\\u0421\\u0443\\u043C\\u043C\\u0430 \\u043F\\u043B\\u0430\\u0442\\u0435\\u0436\\u0430\",\n      name: \"price\",\n      id: \"price\",\n      type: \"number\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 13\n      }\n    }, \"\\u041E\\u041F\\u041B\\u0410\\u0422\\u0418\\u0422\\u042C\"), /*#__PURE__*/React.createElement(Modal, {\n      isOpen: modalIsOpen,\n      shouldCloseOnOverlayClick: false,\n      onRequestClose: () => setModalIsOpen(false),\n      style: {\n        overlay: {\n          backgroundColor: \"grey\",\n          position: 'fixed'\n        },\n        content: {\n          position: 'absolute',\n          top: '400px',\n          left: '400px',\n          right: '400px',\n          bottom: '400px',\n          border: '1px solid #ccc',\n          background: '#fff',\n          overflow: 'auto',\n          WebkitOverflowScrolling: 'touch',\n          borderRadius: '4px',\n          outline: 'none',\n          padding: '200px'\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 17\n      }\n    }, \"title\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 17\n      }\n    }, \"\\u041E\\u043F\\u0435\\u0440\\u0430\\u0446\\u0438\\u044F \\u043F\\u0440\\u043E\\u0448\\u043B\\u0430 \\u0443\\u0441\\u043F\\u0448\\u043D\\u043E!\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => setModalIsOpen(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 21\n      }\n    }, \"Close\")))), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Modal, {\n      isOpen: modalIsOpe,\n      shouldCloseOnOverlayClick: false,\n      onRequestClose: () => setModalIsOpen1(false),\n      style: {\n        overlay: {\n          backgroundColor: \"grey\",\n          position: 'fixed'\n        },\n        content: {\n          position: 'absolute',\n          top: '400px',\n          left: '400px',\n          right: '400px',\n          bottom: '400px',\n          border: '1px solid #ccc',\n          background: '#fff',\n          overflow: 'auto',\n          WebkitOverflowScrolling: 'touch',\n          borderRadius: '4px',\n          outline: 'none',\n          padding: '200px'\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 17\n      }\n    }, \"title\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 17\n      }\n    }, \"\\u041F\\u0440\\u043E\\u0438\\u0437\\u043E\\u0448\\u043B\\u0430 \\u043E\\u0448\\u0438\\u0431\\u043A\\u0430, \\u043F\\u043E\\u0432\\u0442\\u043E\\u0440\\u0438\\u0442\\u0435 \\u043E\\u043F\\u0435\\u0440\\u0430\\u0446\\u0438\\u044E!\"), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => setModalIsOpen1(false),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 21\n      }\n    }, \"Close\")))));\n  }));\n};\n\nexport default NewInput;","map":{"version":3,"sources":["/home/nastya/myProject (copy)/my-app/src/components/Imputs/inputs.tsx"],"names":["React","useState","Formik","Form","Yup","MyTextField","MaskedInput","MyMaskField","Modal","styled","Button","button","initialValues","phoneNumber","price","nam","TextMaskCustom","props","inputRef","other","ref","inputElement","PaymentSchema","object","shape","string","required","length","number","min","max","NewInput","modalIsOpen","setModalIsOpen","modalIsOpe","setModalIsOpen1","successMsg","handleSubmit","values","setValues","textmask","handleChange","event","target","name","value","opacity","overlay","backgroundColor","position","content","top","left","right","bottom","border","background","overflow","WebkitOverflowScrolling","borderRadius","outline","padding"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAAoC,QAApC;AACA,OAAO,KAAKC,GAAZ,MAAqB,KAArB;AACA,OAAOC,WAAP,MAAwB,OAAxB;AAEA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,WAAP,MAAwB,YAAxB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AAMA,MAAMC,MAAM,GAAGD,MAAM,CAACE,MAAO;;;;;;;;;;;;;;;;;CAA7B;AA4BE,MAAMC,aAAyB,GAAG;AAChCC,EAAAA,WAAW,EAAE,EADmB;AAEhCC,EAAAA,KAAK,EAAE,EAFyB;AAGhCC,EAAAA,GAAG,EAAE;AAH2B,CAAlC;;AAgBA;AACA,MAAMC,cAAc,GAAIC,KAAD,IAA+B;AACpD,QAAM;AAAEC,IAAAA,QAAF;AAAY,OAAGC;AAAf,MAAyBF,KAA/B;AAEA,sBACE,oBAAC,WAAD,oBACME,KADN;AAEE,IAAA,GAAG,EAAGC,GAAD,IAAc;AACjBF,MAAAA,QAAQ,CAACE,GAAG,GAAGA,GAAG,CAACC,YAAP,GAAsB,IAA1B,CAAR;AACD,KAJH;AAKE,IAAA,IAAI,EAAE,CACJ,GADI,EAEJ,GAFI,EAGJ,GAHI,EAIJ,GAJI,EAKJ,OALI,EAMJ,IANI,EAOJ,IAPI,EAQJ,GARI,EASJ,GATI,EAUJ,IAVI,EAWJ,IAXI,EAYJ,GAZI,EAaJ,IAbI,EAcJ,IAdI,EAeJ,GAfI,EAgBJ,IAhBI,EAiBJ,IAjBI,EAkBJ,IAlBI,CALR;AAyBE,IAAA,eAAe,EAAE,QAzBnB;AA0BE,IAAA,QAAQ,MA1BV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AA8BD,CAjCD;;AAyCA,MAAMC,aAAa,GAAGlB,GAAG,CAACmB,MAAJ,GAAaC,KAAb,CAAmB;AACvCX,EAAAA,WAAW,EAAET,GAAG,CAACqB,MAAJ,GACVC,QADU,CACD,eADC,EAEVC,MAFU,CAEH,EAFG,EAEC,OAFD,CAD0B;AAIvCb,EAAAA,KAAK,EAAEV,GAAG,CAACwB,MAAJ,GACJC,GADI,CACA,CADA,EACG,EADH,EAEJC,GAFI,CAEA,IAFA,EAEM,iCAFN,EAGJJ,QAHI,CAGK,uBAHL;AAJgC,CAAnB,CAAtB,C,CAYA;;AACE,MAAMK,QAAkB,GAAId,KAAD,IAAW;AAEtC,QAAM,CAACe,WAAD,EAAcC,cAAd,IAAgChC,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACiC,UAAD,EAAaC,eAAb,IAAgClC,QAAQ,CAAC,KAAD,CAA9C;AAGA,QAAMmC,UAAU,GAAG,CAAC,uCAAD,EAA0C,sCAA1C,CAAnB,CANsC,CAQtC;AACA;AACA;AACA;AAEJ;AACA;AACA;AACA;AACA;AAGI;AAEA;AAEA;;AACA,QAAMC,YAAY,GAAIC,MAAD,IAA8B;AAC/CL,IAAAA,cAAc,CAAC,IAAD,CAAd;AACH,GAFD;;AAMA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBvC,KAAK,CAACC,QAAN,CAAsB;AAChDuC,IAAAA,QAAQ,EAAE;AADsC,GAAtB,CAA5B;;AAGA,QAAMC,YAAY,GAAIC,KAAD,IAAgD;AACnEH,IAAAA,SAAS,CAAC,EACR,GAAGD,MADK;AAER,OAACI,KAAK,CAACC,MAAN,CAAaC,IAAd,GAAqBF,KAAK,CAACC,MAAN,CAAaE;AAF1B,KAAD,CAAT;AAID,GALD;;AAMA,sBAEE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAE;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAd;AACF,IAAA,EAAE,EAAE;AAAEA,MAAAA,OAAO,EAAE;AAAX,KADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEA;AAAI,IAAA,SAAS,EAAE,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uFAFA,CADF,eAKE,oBAAC,MAAD;AACE,IAAA,aAAa,EAAElC,aADjB;AAEE,IAAA,QAAQ,EAAEyB,YAFZ;AAGE,IAAA,gBAAgB,EAAEf,aAHpB;AAIE,IAAA,YAAY,EAAEmB,YAJhB;AAKE,IAAA,KAAK,MALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOG,MAAM;AACL,wBACE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,WAAD;AACA,MAAA,KAAK,EAAC,iFADN;AAEA,MAAA,QAAQ,EAAC,EAFT;AAGA,MAAA,IAAI,EAAE,aAHN;AAIA,MAAA,EAAE,EAAC,aAJH;AAKA,MAAA,IAAI,EAAC,QALL;AAMA,MAAA,QAAQ,MANR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eASE,oBAAC,WAAD;AACA,MAAA,KAAK,EAAC,2EADN;AAEA,MAAA,IAAI,EAAE,OAFN;AAGA,MAAA,EAAE,EAAC,OAHH;AAIA,MAAA,IAAI,EAAC,QAJL;AAKA,MAAA,QAAQ,MALR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,eAgBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACJ,oBAAC,MAAD;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0DADI,eAEJ,oBAAC,KAAD;AACA,MAAA,MAAM,EAAET,WADR;AAEA,MAAA,yBAAyB,EAAE,KAF3B;AAGA,MAAA,cAAc,EAAE,MAAMC,cAAc,CAAC,KAAD,CAHpC;AAIA,MAAA,KAAK,EAAE;AACHc,QAAAA,OAAO,EAAE;AACLC,UAAAA,eAAe,EAAE,MADZ;AAELC,UAAAA,QAAQ,EAAE;AAFL,SADN;AAKCC,QAAAA,OAAO,EAAE;AACTD,UAAAA,QAAQ,EAAE,UADD;AAETE,UAAAA,GAAG,EAAE,OAFI;AAGTC,UAAAA,IAAI,EAAE,OAHG;AAITC,UAAAA,KAAK,EAAE,OAJE;AAKTC,UAAAA,MAAM,EAAE,OALC;AAMTC,UAAAA,MAAM,EAAE,gBANC;AAOTC,UAAAA,UAAU,EAAE,MAPH;AAQTC,UAAAA,QAAQ,EAAE,MARD;AASTC,UAAAA,uBAAuB,EAAE,OAThB;AAUTC,UAAAA,YAAY,EAAE,KAVL;AAWTC,UAAAA,OAAO,EAAE,MAXA;AAYTC,UAAAA,OAAO,EAAE;AAZA;AALV,OAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAuBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAvBJ,eAwBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qIAxBJ,eAyBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAQ,MAAA,OAAO,EAAE,MAAM5B,cAAc,CAAC,KAAD,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,CAzBJ,CAFI,CAhBF,eAgDN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI,oBAAC,KAAD;AACA,MAAA,MAAM,EAAEC,UADR;AAEA,MAAA,yBAAyB,EAAE,KAF3B;AAGA,MAAA,cAAc,EAAE,MAAMC,eAAe,CAAC,KAAD,CAHrC;AAIA,MAAA,KAAK,EAAE;AACHY,QAAAA,OAAO,EAAE;AACLC,UAAAA,eAAe,EAAE,MADZ;AAELC,UAAAA,QAAQ,EAAE;AAFL,SADN;AAKCC,QAAAA,OAAO,EAAE;AACTD,UAAAA,QAAQ,EAAE,UADD;AAETE,UAAAA,GAAG,EAAE,OAFI;AAGTC,UAAAA,IAAI,EAAE,OAHG;AAITC,UAAAA,KAAK,EAAE,OAJE;AAKTC,UAAAA,MAAM,EAAE,OALC;AAMTC,UAAAA,MAAM,EAAE,gBANC;AAOTC,UAAAA,UAAU,EAAE,MAPH;AAQTC,UAAAA,QAAQ,EAAE,MARD;AASTC,UAAAA,uBAAuB,EAAE,OAThB;AAUTC,UAAAA,YAAY,EAAE,KAVL;AAWTC,UAAAA,OAAO,EAAE,MAXA;AAYTC,UAAAA,OAAO,EAAE;AAZA;AALV,OAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAuBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAvBJ,eAwBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+MAxBJ,eAyBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAQ,MAAA,OAAO,EAAE,MAAM1B,eAAe,CAAC,KAAD,CAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADJ,CAzBJ,CADJ,CAhDM,CADF;AAkFD,GA1FH,CALF,CAFF;AAqGD,CA7IC;;AA+IF,eAAeJ,QAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Formik, Form, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport MyTextField from \"./use\";\nimport Btn from \"../Button/Button\";\nimport MaskedInput from \"react-text-mask\";\nimport MyMaskField from './use.Mask'\nimport Modal from \"react-modal\"\nimport styled from 'styled-components'\nimport MyHeader from '../ArtDesign/Header'\nimport {useTransition, animated} from 'react-spring'\n\n\n\nconst Button = styled.button`\nborder: none;\nbackground-color: #1f2229;\nfont-family: \"AvenirNextCyrRegular\", sans-serif;\nfont-size: 18px;\ntransition: all 0.15s;\ncursor: pointer;\nwidth: 250px;\nheight: 60px;\nborder-radius: 2px;\ncolor: #fff;\nmargin: 12px 0;\n&:hover { \nbackground: rgba(0,0,0,0); \ncolor: #000000; \nbox-shadow: inset 0 0 0 3px #000000\n}\n`\n\n\n\n\ninterface FormValues {\n    phoneNumber: string | number;\n    price: string;\n    nam: string\n  }\n  \n  const initialValues: FormValues = {\n    phoneNumber: \"\",\n    price: \"\",\n    nam: \"\"\n\n  };\n\n\n\n\n\n  interface TextMaskCustomProps {\n    inputRef: (ref: HTMLInputElement | null) => void;\n  }\n  \n\n  //Компонент\n  const TextMaskCustom = (props: TextMaskCustomProps) =>{\n    const { inputRef, ...other } = props;\n  \n    return (\n      <MaskedInput\n        {...other}\n        ref={(ref: any) => {\n          inputRef(ref ? ref.inputElement : null);\n        }}\n        mask={[\n          \"+\",\n          \"7\",\n          \" \",\n          \"(\",\n          /[7-9]/,\n          /\\d/,\n          /\\d/,\n          \")\",\n          \" \",\n          /\\d/,\n          /\\d/,\n          \"-\",\n          /\\d/,\n          /\\d/,\n          \"-\",\n          /\\d/,\n          /\\d/,\n          /\\d/\n        ]}\n        placeholderChar={'\\u2000'}\n        showMask\n      />\n    );\n  }\n  \n  interface State {\n  textmask: string;\n    \n  }\n\n  \n  const PaymentSchema = Yup.object().shape({\n    phoneNumber: Yup.string()\n      .required(\"Введите номер\")\n      .length(18, \"error\"),\n    price: Yup.number()\n      .min(1, \"\")\n      .max(1000, \"Сумма не должна превышать 1000₽\" )\n      .required(\"Введите сумму платежа\")\n  });\n\n\n\n  //Компонент\n    const NewInput: React.FC = (props) => {\n\n    const [modalIsOpen, setModalIsOpen] = useState(false)\n    const [modalIsOpe, setModalIsOpen1] = useState(false)\n\n\n    const successMsg = ['Оплата мобильной связи прошла успешно', 'Произошла ошибка! Повторите операцию'];\n\n    // const arrModal = [\n    //     setModalIsOpen(true),\n    //     setModalIsOpen1(true)\n    // ]\n\n//     const handleSubmit = (values: FormValues): void => {\n//     return (\n//     alert(successMsg[Math.floor(Math.random() * successMsg.length)])\n// )\n//     };\n\n\n    // const handleSubmit = (values: FormValues): void => {\n\n    //   alert[Math.floor(Math.random() * arrModal.length)]\n    \n    //      }\n    const handleSubmit = (values: FormValues): void => {\n        setModalIsOpen(true);\n    };\n\n\n    \n    const [values, setValues] = React.useState<State>({\n      textmask: '',\n    });\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n      setValues({\n        ...values,\n        [event.target.name]: event.target.value,\n      });\n    };\n    return (\n      \n      <div className=\"container\">\n        <Spring from={{ opacity: 0 }}\n      to={{ opacity: 1 }}>\n        <h2 className= \"title\">Пополнить счёт</h2></Spring>\n        \n        <Formik\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          validationSchema={PaymentSchema}\n          handleChange={handleChange}\n          dirty\n        >\n          {() => {\n            return (\n              <Form >\n                <MyMaskField\n                label=\"Номер телефона\"\n                textmask=''\n                name= 'phoneNumber'\n                id=\"phoneNumber\"\n                type=\"string\"\n                required\n                />\n                <MyTextField\n                label=\"Сумма платежа\"\n                name= 'price'\n                id=\"price\"\n                type=\"number\"\n                required\n                />\n                <div>\n            <Button type='submit' >ОПЛАТИТЬ</Button> \n            <Modal \n            isOpen={modalIsOpen} \n            shouldCloseOnOverlayClick={false} \n            onRequestClose={() => setModalIsOpen(false)}\n            style={{\n                overlay: {\n                    backgroundColor: \"grey\",\n                    position: 'fixed',\n                    },\n                    content: {\n                    position: 'absolute',\n                    top: '400px',\n                    left: '400px',\n                    right: '400px',\n                    bottom: '400px',\n                    border: '1px solid #ccc',\n                    background: '#fff',\n                    overflow: 'auto',\n                    WebkitOverflowScrolling: 'touch',\n                    borderRadius: '4px',\n                    outline: 'none',\n                    padding: '200px'\n                    }}}>\n                <h2>title</h2>\n                <p>Операция прошла успшно!</p>\n                <div>\n                    <button onClick={() => setModalIsOpen(false) }>Close</button>\n                </div>\n            </Modal> \n        </div>\n        <div>\n            <Modal \n            isOpen={modalIsOpe} \n            shouldCloseOnOverlayClick={false} \n            onRequestClose={() => setModalIsOpen1(false)}\n            style={{\n                overlay: {\n                    backgroundColor: \"grey\",\n                    position: 'fixed',\n                    },\n                    content: {\n                    position: 'absolute',\n                    top: '400px',\n                    left: '400px',\n                    right: '400px',\n                    bottom: '400px',\n                    border: '1px solid #ccc',\n                    background: '#fff',\n                    overflow: 'auto',\n                    WebkitOverflowScrolling: 'touch',\n                    borderRadius: '4px',\n                    outline: 'none',\n                    padding: '200px'\n                    }}}>\n                <h2>title</h2>\n                <p>Произошла ошибка, повторите операцию!</p>\n                <div>\n                    <button onClick={() => setModalIsOpen1(false) }>Close</button>\n                </div>\n            </Modal> \n        </div>\n              </Form>\n            );\n          }}\n        </Formik>\n      </div>\n    );\n  };\n  \n  export default NewInput;\n\n  "]},"metadata":{},"sourceType":"module"}