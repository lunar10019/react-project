{"ast":null,"code":"var _jsxFileName = \"/home/nastya/myProject (copy)/my-app/src/components/Imputs/inputs.tsx\";\nimport React from 'react';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextField from './use';\nimport MyMaskField from './use.Mask';\nimport styled from 'styled-components';\nconst Button = styled.button`\n  border: none;\n  background-color: #1f2229;\n  font-family: 'AvenirNextCyrRegular', sans-serif;\n  font-size: 18px;\n  transition: all 0.15s;\n  cursor: pointer;\n  width: 250px;\n  height: 60px;\n  border-radius: 2px;\n  color: #fff;\n  margin: 12px 0;\n  &:hover {\n    background: rgba(0, 0, 0, 0);\n    color: #000000;\n    box-shadow: inset 0 0 0 3px #000000;\n  }\n`;\nconst initialValues = {\n  phoneNumber: '',\n  price: '',\n  nam: ''\n};\nconst PaymentSchema = Yup.object().shape({\n  phoneNumber: Yup.string().required('Введите номер').length(18, 'error'),\n  price: Yup.number().min(1, '').max(1000, 'Сумма не должна превышать 1000₽').required('Введите сумму платежа')\n}); //Компонент\n\nconst NewInput = props => {\n  const successMsg = ['Оплата мобильной связи прошла успешно!', 'Произошла ошибка! Повторите операцию'];\n\n  const handleSubmit = values => {\n    return alert(successMsg[Math.floor(Math.random() * successMsg.length)]);\n  };\n\n  const [values, setValues] = React.useState({\n    textmask: ''\n  });\n\n  const handleChange = event => {\n    setValues({ ...values,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }\n  }, \"\\u041F\\u043E\\u043F\\u043E\\u043B\\u043D\\u0438\\u0442\\u044C \\u0441\\u0447\\u0451\\u0442\"), /*#__PURE__*/React.createElement(Formik, {\n    initialValues: initialValues,\n    onSubmit: handleSubmit,\n    validationSchema: PaymentSchema,\n    handleChange: handleChange,\n    dirty: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, () => {\n    return /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(MyMaskField, {\n      label: \"\\u041D\\u043E\\u043C\\u0435\\u0440 \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\\u0430\",\n      textmask: \"\",\n      name: \"phoneNumber\",\n      id: \"phoneNumber\",\n      type: \"string\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(MyTextField, {\n      label: \"\\u0421\\u0443\\u043C\\u043C\\u0430 \\u043F\\u043B\\u0430\\u0442\\u0435\\u0436\\u0430\",\n      name: \"price\",\n      id: \"price\",\n      type: \"number\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }\n    }, \"\\u041E\\u041F\\u041B\\u0410\\u0422\\u0418\\u0422\\u042C\")));\n  }));\n};\n\nexport default NewInput;","map":{"version":3,"sources":["/home/nastya/myProject (copy)/my-app/src/components/Imputs/inputs.tsx"],"names":["React","Formik","Form","Yup","MyTextField","MyMaskField","styled","Button","button","initialValues","phoneNumber","price","nam","PaymentSchema","object","shape","string","required","length","number","min","max","NewInput","props","successMsg","handleSubmit","values","alert","Math","floor","random","setValues","useState","textmask","handleChange","event","target","name","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextField from './use';\nimport MyMaskField from './use.Mask';\nimport styled from 'styled-components';\n\nconst Button = styled.button`\n  border: none;\n  background-color: #1f2229;\n  font-family: 'AvenirNextCyrRegular', sans-serif;\n  font-size: 18px;\n  transition: all 0.15s;\n  cursor: pointer;\n  width: 250px;\n  height: 60px;\n  border-radius: 2px;\n  color: #fff;\n  margin: 12px 0;\n  &:hover {\n    background: rgba(0, 0, 0, 0);\n    color: #000000;\n    box-shadow: inset 0 0 0 3px #000000;\n  }\n`;\n\ninterface FormValues {\n  phoneNumber: string | number;\n  price: string;\n  nam: string;\n}\n\nconst initialValues: FormValues = {\n  phoneNumber: '',\n  price: '',\n  nam: '',\n};\n\ninterface State {\n  textmask: string;\n}\n\nconst PaymentSchema = Yup.object().shape({\n  phoneNumber: Yup.string().required('Введите номер').length(18, 'error'),\n  price: Yup.number()\n    .min(1, '')\n    .max(1000, 'Сумма не должна превышать 1000₽')\n    .required('Введите сумму платежа'),\n});\n\n//Компонент\nconst NewInput: React.FC = (props) => {\n  const successMsg = [\n    'Оплата мобильной связи прошла успешно!',\n    'Произошла ошибка! Повторите операцию',\n  ];\n\n  const handleSubmit = (values: FormValues): void => {\n    return alert(successMsg[Math.floor(Math.random() * successMsg.length)]);\n  };\n\n  const [values, setValues] = React.useState<State>({\n    textmask: '',\n  });\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setValues({\n      ...values,\n      [event.target.name]: event.target.value,\n    });\n  };\n  return (\n    <div className=\"container\">\n      <h2 className=\"title\">Пополнить счёт</h2>\n\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        validationSchema={PaymentSchema}\n        handleChange={handleChange}\n        dirty>\n        {() => {\n          return (\n            <Form>\n              <MyMaskField\n                label=\"Номер телефона\"\n                textmask=\"\"\n                name=\"phoneNumber\"\n                id=\"phoneNumber\"\n                type=\"string\"\n                required\n              />\n              <MyTextField label=\"Сумма платежа\" name=\"price\" id=\"price\" type=\"number\" required />\n              <div>\n                <Button type=\"submit\">ОПЛАТИТЬ</Button>\n              </div>\n            </Form>\n          );\n        }}\n      </Formik>\n    </div>\n  );\n};\n\nexport default NewInput;\n"]},"metadata":{},"sourceType":"module"}