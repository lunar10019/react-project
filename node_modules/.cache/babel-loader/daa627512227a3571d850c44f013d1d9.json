{"ast":null,"code":"var _jsxFileName = \"/home/nastya/myProject (copy)/my-app/src/components/Imputs/inputs.tsx\";\nimport React, { useState } from 'react';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextField from './use';\nimport MyMaskField from './use.Mask';\nimport { motion } from 'framer-motion';\nimport Button from '@material-ui/core/Button';\nimport { CircularProgress } from 'material-ui';\n\nconst sleep = time => new Promise(acc => setTimeout(acc, time));\n\nconst initialValues = {\n  phoneNumber: '',\n  price: '',\n  nam: ''\n};\nconst PaymentSchema = Yup.object().shape({\n  phoneNumber: Yup.string().required('Введите номер'),\n  price: Yup.number().min(1, '').max(1000, 'Сумма не должна превышать 1000₽').required('Введите сумму платежа')\n}); //Компонент\n\nconst NewInput = props => {\n  const successMsg = ['Оплата мобильной связи прошла успешно!', 'Произошла ошибка! Повторите операцию'];\n  const [isLoading, setLoading] = useState(false);\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  const handleSubmit = async (values, formikHelpers) => {\n    setLoading(true);\n    await sleep(3000);\n    setLoading(false);\n    await sleep(1);\n    alert(successMsg[Math.floor(Math.random() * successMsg.length)]);\n  };\n\n  const [values, setValues] = React.useState({\n    textmask: ''\n  });\n\n  const handleChange = event => {\n    setValues({ ...values,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(motion.div, {\n    className: \"centrForm\",\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    transition: {\n      delay: 0.3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, \"\\u041F\\u043E\\u043F\\u043E\\u043B\\u043D\\u0438\\u0442\\u044C \\u0441\\u0447\\u0451\\u0442\"), /*#__PURE__*/React.createElement(Formik, {\n    initialValues: initialValues,\n    onSubmit: handleSubmit,\n    validationSchema: PaymentSchema,\n    handleChange: handleChange // component={MyForm}\n    ,\n    dirty: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, props => {\n    // props.isSubmitting;\n    return /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(MyMaskField, {\n      variant: \"outlined\",\n      label: \"\\u041D\\u043E\\u043C\\u0435\\u0440 \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\\u0430\",\n      textmask: \"\",\n      name: \"phoneNumber\",\n      id: \"phoneNumber\",\n      type: \"string\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(MyTextField, {\n      variant: \"outlined\",\n      label: \"\\u0421\\u0443\\u043C\\u043C\\u0430 \\u043F\\u043B\\u0430\\u0442\\u0435\\u0436\\u0430\",\n      name: \"price\",\n      id: \"price\",\n      type: \"number\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }\n    }, !isLoading && /*#__PURE__*/React.createElement(Button, {\n      variant: \"outlined\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 21\n      }\n    }, \"\\u041E\\u043F\\u043B\\u0430\\u0442\\u0438\\u0442\\u044C\"), isLoading && /*#__PURE__*/React.createElement(Button, {\n      variant: \"outlined\",\n      type: \"submit\",\n      disabled: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 21\n      }\n    }, \"\\u041E\\u043F\\u043B\\u0430\\u0442\\u0430...\", /*#__PURE__*/React.createElement(CircularProgress, {\n      color: \"#6200ea\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 23\n      }\n    }))));\n  })));\n};\n\nexport default NewInput;","map":{"version":3,"sources":["/home/nastya/myProject (copy)/my-app/src/components/Imputs/inputs.tsx"],"names":["React","useState","Formik","Form","Yup","MyTextField","MyMaskField","motion","Button","CircularProgress","sleep","time","Promise","acc","setTimeout","initialValues","phoneNumber","price","nam","PaymentSchema","object","shape","string","required","number","min","max","NewInput","props","successMsg","isLoading","setLoading","open","setOpen","handleClick","handleClose","event","reason","handleSubmit","values","formikHelpers","alert","Math","floor","random","length","setValues","textmask","handleChange","target","name","value","opacity","delay"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Formik, Form, FormikHelpers } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextField from './use';\nimport MyMaskField from './use.Mask';\nimport { motion } from 'framer-motion';\nimport Button from '@material-ui/core/Button';\nimport { CircularProgress } from 'material-ui';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Alert from '@material-ui/lab/Alert';\nimport { SnackbarProvider, VariantType, useSnackbar } from 'notistack';\n\nconst sleep = (time) => new Promise((acc) => setTimeout(acc, time));\n\ninterface FormValues {\n  phoneNumber: string | number;\n  price: string;\n  nam: string;\n}\n\nconst initialValues: FormValues = {\n  phoneNumber: '',\n  price: '',\n  nam: '',\n};\n\ninterface State {\n  textmask: string;\n}\n\nconst PaymentSchema = Yup.object().shape({\n  phoneNumber: Yup.string().required('Введите номер'),\n  price: Yup.number()\n    .min(1, '')\n    .max(1000, 'Сумма не должна превышать 1000₽')\n    .required('Введите сумму платежа'),\n});\n\n//Компонент\nconst NewInput: React.FC = (props) => {\n  const successMsg = [\n    'Оплата мобильной связи прошла успешно!',\n    'Произошла ошибка! Повторите операцию',\n  ];\n\n  const [isLoading, setLoading] = useState(false);\n\n  const [open, setOpen] = React.useState(false);\n\n  const handleClick = () => {\n    setOpen(true);\n  };\n\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  const handleSubmit = async (values: FormValues, formikHelpers: FormikHelpers<FormValues>) => {\n    setLoading(true);\n    await sleep(3000);\n    setLoading(false);\n    await sleep(1);\n    alert(successMsg[Math.floor(Math.random() * successMsg.length)]);\n  };\n\n  const [values, setValues] = React.useState<State>({\n    textmask: '',\n  });\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setValues({\n      ...values,\n      [event.target.name]: event.target.value,\n    });\n  };\n\n  return (\n    <motion.div\n      className=\"centrForm\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ delay: 0.3 }}>\n      <div className=\"container\">\n        <h2 className=\"title\">Пополнить счёт</h2>\n        <Formik\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          validationSchema={PaymentSchema}\n          handleChange={handleChange}\n          // component={MyForm}\n          dirty>\n          {(props) => {\n            // props.isSubmitting;\n            return (\n              <Form>\n                <div>\n                  <MyMaskField\n                    variant=\"outlined\"\n                    label=\"Номер телефона\"\n                    textmask=\"\"\n                    name=\"phoneNumber\"\n                    id=\"phoneNumber\"\n                    type=\"string\"\n                    required\n                  />\n                  <MyTextField\n                    variant=\"outlined\"\n                    label=\"Сумма платежа\"\n                    name=\"price\"\n                    id=\"price\"\n                    type=\"number\"\n                    required\n                  />\n                </div>\n\n                <div>\n                  {!isLoading && (\n                    <Button variant=\"outlined\" type=\"submit\">\n                      Оплатить\n                    </Button>\n                  )}\n                  {isLoading && (\n                    <Button variant=\"outlined\" type=\"submit\" disabled>\n                      Оплата...\n                      <CircularProgress color=\"#6200ea\" />\n                    </Button>\n                  )}\n                </div>\n              </Form>\n            );\n          }}\n        </Formik>\n      </div>\n    </motion.div>\n  );\n};\n\nexport default NewInput;\n"]},"metadata":{},"sourceType":"module"}