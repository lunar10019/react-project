{"ast":null,"code":"var _jsxFileName = \"/home/nastya/myProject (copy)/my-app/src/components/Imputs/inputs.tsx\";\nimport React from 'react';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextField from './use';\nimport MyMaskField from './use.Mask';\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\nconst Button = styled.button`\n  border: none;\n  background-color: #1f2229;\n  font-family: 'AvenirNextCyrRegular', sans-serif;\n  font-size: 18px;\n  transition: all 0.15s;\n  cursor: pointer;\n  width: 250px;\n  height: 60px;\n  border-radius: 2px;\n  color: #fff;\n  margin: 12px 0;\n  &:hover {\n    background: rgba(0, 0, 0, 0);\n    color: #000000;\n    box-shadow: inset 0 0 0 3px #000000;\n  }\n`;\nconst initialValues = {\n  phoneNumber: '',\n  price: '',\n  nam: ''\n};\nconst PaymentSchema = Yup.object().shape({\n  phoneNumber: Yup.string().required('Введите номер'),\n  price: Yup.number().min(1, '').max(1000, 'Сумма не должна превышать 1000₽').required('Введите сумму платежа')\n}); //Компонент\n\nconst NewInput = props => {\n  const successMsg = ['Оплата мобильной связи прошла успешно!', 'Произошла ошибка! Повторите операцию'];\n\n  const handleSubmit = (values, formikHelpers) => {\n    // formikHelpers.setStatus;\n    Math.random();\n    return alert(successMsg[Math.floor(Math.random() * successMsg.length)]);\n  };\n\n  const [values, setValues] = React.useState({\n    textmask: ''\n  });\n\n  const handleChange = event => {\n    setValues({ ...values,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(motion.div, {\n    className: \"centrForm\",\n    initial: {\n      opacity: 0\n    },\n    animate: {\n      opacity: 1\n    },\n    transition: {\n      delay: 0.3\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"centrForm\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, \"\\u041F\\u043E\\u043F\\u043E\\u043B\\u043D\\u0438\\u0442\\u044C \\u0441\\u0447\\u0451\\u0442\"), /*#__PURE__*/React.createElement(Formik, {\n    initialValues: initialValues,\n    onSubmit: handleSubmit,\n    validationSchema: PaymentSchema,\n    handleChange: handleChange // component={MyForm}\n    ,\n    dirty: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, props => {\n    // props.isSubmitting;\n    return /*#__PURE__*/React.createElement(Form, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(MyMaskField, {\n      variant: \"outlined\",\n      label: \"\\u041D\\u043E\\u043C\\u0435\\u0440 \\u0442\\u0435\\u043B\\u0435\\u0444\\u043E\\u043D\\u0430\",\n      textmask: \"\",\n      name: \"phoneNumber\",\n      id: \"phoneNumber\",\n      type: \"string\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(MyTextField, {\n      variant: \"outlined\",\n      label: \"\\u0421\\u0443\\u043C\\u043C\\u0430 \\u043F\\u043B\\u0430\\u0442\\u0435\\u0436\\u0430\",\n      name: \"price\",\n      id: \"price\",\n      type: \"number\",\n      required: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 19\n      }\n    }, \"\\u041E\\u041F\\u041B\\u0410\\u0422\\u0418\\u0422\\u042C\")));\n  })));\n};\n\nexport default NewInput;","map":{"version":3,"sources":["/home/nastya/myProject (copy)/my-app/src/components/Imputs/inputs.tsx"],"names":["React","Formik","Form","Yup","MyTextField","MyMaskField","styled","motion","Button","button","initialValues","phoneNumber","price","nam","PaymentSchema","object","shape","string","required","number","min","max","NewInput","props","successMsg","handleSubmit","values","formikHelpers","Math","random","alert","floor","length","setValues","useState","textmask","handleChange","event","target","name","value","opacity","delay"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Formik, Form, FormikHelpers } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextField from './use';\nimport MyMaskField from './use.Mask';\nimport styled from 'styled-components';\nimport { motion } from 'framer-motion';\n\nconst Button = styled.button`\n  border: none;\n  background-color: #1f2229;\n  font-family: 'AvenirNextCyrRegular', sans-serif;\n  font-size: 18px;\n  transition: all 0.15s;\n  cursor: pointer;\n  width: 250px;\n  height: 60px;\n  border-radius: 2px;\n  color: #fff;\n  margin: 12px 0;\n  &:hover {\n    background: rgba(0, 0, 0, 0);\n    color: #000000;\n    box-shadow: inset 0 0 0 3px #000000;\n  }\n`;\n\ninterface FormValues {\n  phoneNumber: string | number;\n  price: string;\n  nam: string;\n}\n\nconst initialValues: FormValues = {\n  phoneNumber: '',\n  price: '',\n  nam: '',\n};\n\ninterface State {\n  textmask: string;\n}\n\nconst PaymentSchema = Yup.object().shape({\n  phoneNumber: Yup.string().required('Введите номер'),\n  price: Yup.number()\n    .min(1, '')\n    .max(1000, 'Сумма не должна превышать 1000₽')\n    .required('Введите сумму платежа'),\n});\n\n//Компонент\nconst NewInput: React.FC = (props) => {\n  const successMsg = [\n    'Оплата мобильной связи прошла успешно!',\n    'Произошла ошибка! Повторите операцию',\n  ];\n\n  const handleSubmit = (values: FormValues, formikHelpers: FormikHelpers<FormValues>): void => {\n    // formikHelpers.setStatus;\n    Math.random();\n    return alert(successMsg[Math.floor(Math.random() * successMsg.length)]);\n  };\n\n  const [values, setValues] = React.useState<State>({\n    textmask: '',\n  });\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setValues({\n      ...values,\n      [event.target.name]: event.target.value,\n    });\n  };\n  return (\n    <motion.div\n      className=\"centrForm\"\n      initial={{ opacity: 0 }}\n      animate={{ opacity: 1 }}\n      transition={{ delay: 0.3 }}>\n      <div className=\"centrForm\"></div>\n      <div className=\"container\">\n        <h2 className=\"title\">Пополнить счёт</h2>\n        <Formik\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          validationSchema={PaymentSchema}\n          handleChange={handleChange}\n          // component={MyForm}\n          dirty>\n          {(props) => {\n            // props.isSubmitting;\n            return (\n              <Form>\n                <div>\n                  <MyMaskField\n                    variant=\"outlined\"\n                    label=\"Номер телефона\"\n                    textmask=\"\"\n                    name=\"phoneNumber\"\n                    id=\"phoneNumber\"\n                    type=\"string\"\n                    required\n                  />\n                  <MyTextField\n                    variant=\"outlined\"\n                    label=\"Сумма платежа\"\n                    name=\"price\"\n                    id=\"price\"\n                    type=\"number\"\n                    required\n                  />\n                </div>\n                <div>\n                  <Button type=\"submit\">ОПЛАТИТЬ</Button>\n                </div>\n              </Form>\n            );\n          }}\n        </Formik>\n      </div>\n    </motion.div>\n  );\n};\n\nexport default NewInput;\n"]},"metadata":{},"sourceType":"module"}